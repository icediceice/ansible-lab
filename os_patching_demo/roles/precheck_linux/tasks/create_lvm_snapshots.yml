- name: 'Precheck |  BLOCK : Create LVM Snapshots'
  block:
    - name: 'LVM_SNAPSHOT | Make sure there are no existing snapshots for the root volumes'
      community.general.lvol:
        vg: "{{ mount_device_vg }}"
        lv: "{{ mount_device_lv }}"
        snapshot: "{{ item.lv_snapshot_name }}"
        state: absent
      when: "'/dev/mapper' in mount_device"
      vars:
        device_json_query: "mounts[?mount==`{{ item.mount }}`].device | [0]"
        # This is assuming its based on lvm and also the /dev/mapper/vgname-lvname format
        mount_device: "{{ ansible_facts | json_query(device_json_query)  }}"
        mount_device_vg: "{{ mount_device.split('/')[3].split('-')[0]  }}"
        mount_device_lv: "{{ mount_device.split('/')[3].split('-')[1]  }}"
      loop: "{{ fs_check_val }}"        

    - name: 'LVM_SNAPSHOT | Create snapshots for the root volumes'
      community.general.lvol:
        vg: "{{ mount_device_vg }}"
        lv: "{{ mount_device_lv }}"
        snapshot: "{{ item.lv_snapshot_name }}"
        size: "{{ item.free_size_g }}g"
        state: present
      when: "'/dev/mapper' in mount_device"
      vars:
        device_json_query: "mounts[?mount==`{{ item.mount }}`].device | [0]"
        # This is assuming its based on lvm and also the /dev/mapper/vgname-lvname format
        mount_device: "{{ ansible_facts | json_query(device_json_query)  }}"
        mount_device_vg: "{{ mount_device.split('/')[3].split('-')[0]  }}"
        mount_device_lv: "{{ mount_device.split('/')[3].split('-')[1]  }}"
      loop: "{{ fs_check_val }}"  

  rescue:
    - name: 'LVM_SNAPSHOT |  Set failure message'
      ansible.builtin.set_fact:
        pre_check_status: false
        pre_check_fail: true
        pre_check_fail_stage: 'LVM_SNAPSHOT'
        pre_check_fail_msg: "{{ ansible_failed_result }}" 