- name: 'Precheck |  BLOCK : Check if we have enough free space in the required root volumes'
  block:
    - name: 'FS_CHECK | Check if enough free space is NOT available on the required root volumes'
      ansible.builtin.set_fact:
        vol_fail_msgs: "{{ vol_fail_msgs + vol_fail_msg }} "
      when: size_avail | int < item.free_size_b
      vars:
        size_avail_json_query: "mounts[?mount==`{{ item.mount }}`].size_available | [0]"
        size_avail: "{{ ansible_facts | json_query(size_avail_json_query)  }}"
        vol_fail_msg: "{{ item.mount }} does not have enough free space. Required={{ item.free_size_b }} Available={{ size_avail }} "
        success_msg: "{{ item.mount }} has enough free space. Required={{ item.free_size_b }} Available={{ size_avail }} "
      loop: "{{ fs_check_val }}"

    # - name: 'FS_CHECK | Check if any failures'
    #   ansible.builtin.fail:
    #     msg: "{{ vol_fail_msgs | join('\n') }}"
    #   when: vol_fail_msgs | length > 0 

    
    # Get the vg name from the mount list dict. Add the required free size to the value in vg_required_sizes dictionary
    # This addsup all the required spaces so that we can check it in next task
    - name: 'FS_CHECK | Get required free size for each VG'
      ansible.builtin.set_fact:
        vg_reqd_sizes: "{{ vg_reqd_sizes | combine({ mount_device_vg : (vg_reqd_sizes[mount_device_vg] | default(0) + item.free_size_g)}) }}"
      when: "'/dev/mapper' in mount_device"
      vars:
        device_json_query: "mounts[?mount==`{{ item.mount }}`].device | [0]"
        # This is assuming its based on lvm and also the /dev/mapper/vgname-lvname format
        mount_device: "{{ ansible_facts | json_query(device_json_query)  }}"
        mount_device_vg: "{{ mount_device.split('/')[3].split('-')[0]  }}"
      loop: "{{ fs_check_val }}"        
    
    - name: debug vg_reqd_sizes
      ansible.builtin.debug:
        var: vg_reqd_sizes

    - name: 'FS_CHECK | Check if required free space is NOT available in VGs'
      ansible.builtin.set_fact:
        vg_fail_msgs: "{{ vg_fail_msgs + vg_fail_msg }} "
      when: ansible_facts.lvm.vgs[item.key].free_g | float  < item.value
      vars:
        vg_fail_msg: "{{ item.key }} VG does not have enough free space. Required={{ item.value }} Available={{ ansible_facts.lvm.vgs[item.key].free_g }} "
      loop: "{{ vg_reqd_sizes | dict2items }}"

    - name: 'FS_CHECK | Check if any failures'
      ansible.builtin.fail:
        msg: "{{ (vol_fail_msgs + vg_fail_msgs) | join('\n') }}"
      when: |
        ((vol_fail_msgs | length > 0) or (vg_fail_msgs | length > 0))

  rescue:
    - name: 'FS_CHECK |  Set failure message'
      ansible.builtin.set_fact:
        pre_check_status: false
        pre_check_fail: true
        pre_check_fail_stage: 'FS_CHECK'
        pre_check_fail_msg: "{{ ansible_failed_result }}" 